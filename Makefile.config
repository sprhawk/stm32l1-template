CC			:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-gcc"
AS			:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-gcc"
AR			:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-ar" -r
LD			:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-gcc"
NM			:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-nm"
OBJDUMP		:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-objdump"
OBJCOPY		:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-objcopy"
GDB			:= "$(GCC_ROOT)bin/$(GNU_PREFIX)-gdb"

MK			:= mkdir
RM 			:= rm
OPENOCD = $(OPENOCD_ROOT)bin/openocd

CFLAGS += -O0 -g
CFLAGS += -std=gnu99 
CFLAGS += -Wall -Werror
CFLAGS += -mcpu=cortex-m3
CFLAGS += -mlittle-endian -mthumb -mabi=aapcs
CFLAGS += -mthumb-interwork
CFLAGS += -flto # link time optimization
# CFLAGS += -fno-rtti -fno-exceptions
# CFLAGS += -fdata-sections -ffunction-sections
# CFLAGS += -Og
# CFLAGS += -Os
# CFLAGS += -specs=nano.specs
CFLAGS += -specs=rdimon.specs

CFLAGS += $(patsubst %,-I%, $(SEARCH_PATH))

ASFLAGS += -Wa,-D
ASFLAGS += $(CFLAGS)

LDFLAGS += -T$(LINKER_SCRIPT)
LDFLAGS += -Wl,-Map,$(OUTPUT_DIR)/output.map
LDFLAGS += -lrdimon
# LDFLAGS += -nostartfiles -nodefaultlibs -nostdlib
# LDFLAGS += -lc #-L$(GCC_ROOT)arm-none-eabi/lib/fpu -lc
# LDFLAGS += -lgcc #-L$(GCC_ROOT)lib/gcc/arm-none-eabi/4.9.3/fpu -lgcc
# LDFLAGS += -Wl,--verbose 
LDFLAGS += -flto # link time optimization

LDFLAGS += $(CFLAGS)


ASM_OBJS = $(patsubst ./%, %, $(ASM_SOURCE_FILES:.s=.o))
C_OBJS = $(patsubst ./%, %, $(C_SOURCE_FILES:.c=.o))
OBJS += $(addprefix $(OUTPUT_DIR), $(ASM_OBJS))
OBJS += $(addprefix $(OUTPUT_DIR), $(C_OBJS))
OBJ_DIRS = $(sort $(dir $(OBJS)))

vpath %.c $(C_SOURCE_PATH)
vpath %.s $(ASM_SOURCE_PATH)

.PHONY: all
all: | $(OBJ_DIRS) $(OUTPUT_DIR)$(TARGET).out

$(OUTPUT_DIR)$(TARGET).out: $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $^
	$(OBJCOPY) -O ihex $@ $@.hex
	$(OBJCOPY) -O binary $@ $@.bin


$(dir $(OBJ_DIRS)):
	$(MK) -p $@

# -include $(OUTPUT_DIR)$(C_SOURCE_FILES).d

# if the $(OUTPUT_DIR) is in prerequisits, it will cause rebuild all objects
$(OUTPUT_DIR)%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(OUTPUT_DIR)%.o: %.s
	$(CC) $(ASFLAGS) -c -o $@ $<

.PHONY: echovars
echovars:
	@echo C_SOURCE_PATH: [$(C_SOURCE_PATH)]
	@echo ASM_SOURCE_PATH: [$(ASM_SOURCE_PATH)]
	@echo SEARCH_PATH: [$(SEARCH_PATH)]
	@echo OBJS: [$(OBJS)]

.PHONY: opencd
openocd:
	$(OPENOCD) -s $(OPENOCD_ROOT)share/openocd/scripts -f board/st_nucleo_l1.cfg

.PHONY: load
load:
	$(OPENOCD) -s $(OPENOCD_ROOT)share/openocd/scripts -f board/st_nucleo_l1.cfg -c "program $(OUTPUT_DIR)$(TARGET).out verify reset exit"

.PHONY: gdb
gdb:
	$(GDB) -ex "target remote :3333" -ex "monitor reset halt" -ex "file $(OUTPUT_DIR)$(TARGET).out" -ex "load" -ex "b main" -ex "b HardFault_Handler" -ex "b Error_Handler" -ex "c"	

.PHONY: clean
clean:
	-rm -rf build

